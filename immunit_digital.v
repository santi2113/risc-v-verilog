/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */
module DIG_BitExtender #(
    parameter inputBits = 2,
    parameter outputBits = 4
)
(
    input [(inputBits-1):0] in,
    output [(outputBits - 1):0] out
);
    assign out = {{(outputBits - inputBits){in[inputBits - 1]}}, in};
endmodule




module CompUnsigned #(
    parameter Bits = 1
)
(
    input [(Bits -1):0] a,
    input [(Bits -1):0] b,
    output \> ,
    output \= ,
    output \<
);
    assign \> = a > b;
    assign \= = a == b;
    assign \< = a < b;
endmodule


module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module immunit_digital (
  input [31:0] Inst,
  output [31:0] imm
);
  wire [11:0] s0;
  wire [31:0] immi;
  wire [11:0] s1;
  wire [31:0] imms;
  wire [12:0] s2;
  wire [31:0] immb;
  wire [19:0] s3;
  wire [20:0] s4;
  wire [31:0] immj;
  wire [6:0] opcode;
  wire [2:0] func3;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire [31:0] s13;
  wire [31:0] shamt;
  wire [31:0] s14;
  wire s15;
  wire [31:0] s16;
  wire s17;
  wire [31:0] s18;
  wire s19;
  wire [31:0] s20;
  wire s21;
  wire s22;
  wire [31:0] immu;
  wire s23;
  assign s1[4:0] = Inst[11:7];
  assign s1[11:5] = Inst[31:25];
  assign s2[0] = 1'b0;
  assign s2[4:1] = Inst[11:8];
  assign s2[10:5] = Inst[30:25];
  assign s2[11] = Inst[7];
  assign s2[12] = Inst[31];
  assign s4[0] = 1'b0;
  assign s4[10:1] = Inst[30:21];
  assign s4[11] = Inst[20];
  assign s4[19:12] = Inst[19:12];
  assign s4[20] = Inst[31];
  assign s0 = Inst[31:20];
  assign s3 = Inst[31:12];
  assign opcode = Inst[6:0];
  assign func3 = Inst[14:12];
  DIG_BitExtender #(
    .inputBits(12),
    .outputBits(32)
  )
  DIG_BitExtender_i0 (
    .in( s0 ),
    .out( immi )
  );
  DIG_BitExtender #(
    .inputBits(12),
    .outputBits(32)
  )
  DIG_BitExtender_i1 (
    .in( s1 ),
    .out( imms )
  );
  DIG_BitExtender #(
    .inputBits(13),
    .outputBits(32)
  )
  DIG_BitExtender_i2 (
    .in( s2 ),
    .out( immb )
  );
  DIG_BitExtender #(
    .inputBits(21),
    .outputBits(32)
  )
  DIG_BitExtender_i3 (
    .in( s4 ),
    .out( immj )
  );
  CompUnsigned #(
    .Bits(7)
  )
  CompUnsigned_i4 (
    .a( opcode ),
    .b( 7'b10011 ),
    .\= ( s5 )
  );
  CompUnsigned #(
    .Bits(7)
  )
  CompUnsigned_i5 (
    .a( opcode ),
    .b( 7'b11 ),
    .\= ( s6 )
  );
  CompUnsigned #(
    .Bits(7)
  )
  CompUnsigned_i6 (
    .a( opcode ),
    .b( 7'b1110011 ),
    .\= ( s7 )
  );
  CompUnsigned #(
    .Bits(7)
  )
  CompUnsigned_i7 (
    .a( opcode ),
    .b( 7'b1100111 ),
    .\= ( s8 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i8 (
    .a( func3 ),
    .b( 3'b101 ),
    .\= ( s10 )
  );
  CompUnsigned #(
    .Bits(3)
  )
  CompUnsigned_i9 (
    .a( func3 ),
    .b( 3'b1 ),
    .\= ( s11 )
  );
  CompUnsigned #(
    .Bits(7)
  )
  CompUnsigned_i10 (
    .a( opcode ),
    .b( 7'b100011 ),
    .\= ( s15 )
  );
  CompUnsigned #(
    .Bits(7)
  )
  CompUnsigned_i11 (
    .a( opcode ),
    .b( 7'b1100011 ),
    .\= ( s17 )
  );
  CompUnsigned #(
    .Bits(7)
  )
  CompUnsigned_i12 (
    .a( opcode ),
    .b( 7'b1101111 ),
    .\= ( s19 )
  );
  CompUnsigned #(
    .Bits(7)
  )
  CompUnsigned_i13 (
    .a( opcode ),
    .b( 7'b110111 ),
    .\= ( s21 )
  );
  CompUnsigned #(
    .Bits(7)
  )
  CompUnsigned_i14 (
    .a( opcode ),
    .b( 7'b10111 ),
    .\= ( s23 )
  );
  DIG_BitExtender #(
    .inputBits(20),
    .outputBits(32)
  )
  DIG_BitExtender_i15 (
    .in( s3 ),
    .out( immu )
  );
  assign shamt[4:0] = s0[4:0];
  assign shamt[31:5] = 27'b0;
  assign s9 = (s5 | s6 | s7 | s8);
  assign s12 = (s5 & (s10 | s11));
  assign s22 = (s21 | s23);
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i16 (
    .sel( s9 ),
    .in_0( 32'b0 ),
    .in_1( immi ),
    .out( s13 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i17 (
    .sel( s12 ),
    .in_0( s13 ),
    .in_1( shamt ),
    .out( s14 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i18 (
    .sel( s15 ),
    .in_0( s14 ),
    .in_1( imms ),
    .out( s16 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i19 (
    .sel( s17 ),
    .in_0( s16 ),
    .in_1( immb ),
    .out( s18 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i20 (
    .sel( s19 ),
    .in_0( s18 ),
    .in_1( immj ),
    .out( s20 )
  );
  Mux_2x1_NBits #(
    .Bits(32)
  )
  Mux_2x1_NBits_i21 (
    .sel( s22 ),
    .in_0( s20 ),
    .in_1( immu ),
    .out( imm )
  );
endmodule
